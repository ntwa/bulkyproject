#!/usr/bin/env python
import logging
from logging.handlers import SysLogHandler
import time
from service import find_syslog, Service

#import for code responsible for consuming messages from producers and send it out through SMS gateway 
import thread
import pika
import json
import urllib2,urllib


class SMSDeliveryService(Service):
	def __init__(self, *args, **kwargs):
		super(SMSDeliveryService, self).__init__(*args, **kwargs)
		self.logger.addHandler(SysLogHandler(address=find_syslog(),
		facility=SysLogHandler.LOG_DAEMON))
		self.logger.setLevel(logging.INFO)
	def run(self):
		if not self.got_sigterm():
			self.logger.info("I'm working...")
                        print "Working.."
			#time.sleep(5)
                        startMessageReceiver()
                else:
                        print "Not working"



	def send_sms(self,myjson):
		self.logger.info("Started thread...")
		result={}
		values={}
		values["content"]=myjson["content"]
		values["to"]=[myjson["to"]]
		msg_id=myjson["msgID"]
		url="https://platform.clickatell.com/messages"
	
		try:
		
			data=json.JSONEncoder().encode(values)
			req = urllib2.Request(url, data)
			req.add_header("Content-type",'application/json')
			req.add_header("Accept",'application/json')
				           
			req.add_header('Authorization', 'b3itx5JgS-O7nc7xJ9KVlw==')
				            
			response = urllib2.urlopen(req)
				         
			data = json.load(response)  
			#json.loads(json.JSONEncoder().encode(data))["messages"][0]["accepted"]
			accepted_status=json.loads(json.JSONEncoder().encode(data))["messages"][0]["accepted"]
			msg_error_status=json.loads(json.JSONEncoder().encode(data))["messages"][0]["error"]
			snd_error_status=json.loads(json.JSONEncoder().encode(data))["error"]
				         #print data
				         
			if accepted_status == True and msg_error_status==None and snd_error_status==None:
		
			    result["message"]="SMS was sent successfully"
			    result["status"]=1
				              #self.changeQueuedSMSStatus(msg_id)
			else:
			    result["message"]="SMS failed to send due to the following error: '%s'"%snd_error_status
			    result["status"]=-6
	    	except urllib2.URLError as err: 
			result["message"]="Error: '%s' occurred in sending msg with id='%s'. Check if you are connected to the Internet. If the problem persists contact the developer"%(err,msg_id)           
	       
		                
		                        
		                   
	    	except Exception as error:
		                 #print response.code
			result["message"]="Error in sending a message id='%s' with the following code: %s"%(msg_id,error)
	      
	    	finally:
	    		#print result
                        self.logger.info(result)
	    		#write to a log file about the out come



	def callback(ch, method, properties, body):
                if self.got_sigterm(): #Service has been stopped to send messages.
			sys.exit()
                
		sms_json=json.loads(body)
	    #print(" [x] Received %r" % json.loads(body))
	    	try:
		       
	    		thread.start_new_thread( send_sms, (sms_json, ) )
		except Exception as e:
			self.logger.info("Error: unable to start thread: %s"%e)



	def startMessageReceiver():
		connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))
		channel = connection.channel()


	 	channel.queue_declare(queue='clickatell_sms')


		channel.basic_consume(callback,
		              queue='clickatell_sms',
		              no_ack=True)

		self.logger.info(" [*] Waiting for messages..")
		channel.start_consuming()



if __name__ == '__main__':
	import sys
	if len(sys.argv) != 2:
		sys.exit('Syntax: %s COMMAND' % sys.argv[0])
	cmd = sys.argv[1].lower()
	service = SMSDeliveryService('my_service', pid_dir='/tmp')
        try:
		if cmd == 'start':
			service.start()
		elif cmd == 'stop':
			service.stop()
		elif cmd == 'status':
			if service.is_running():
		  		print "Service is running."
			else:
				print "Service is not running."
		else:
			sys.exit('Unknown command "%s".' % cmd)
	except Exception as e:
		print "Exception thrown: %s"%e




